rmarkdown::render("newtesting.RMD")
rmarkdown::render("./newtesting.RMD")
rmarkdown::render("~/maketest/newtesting.RMD")
dir()
,jstfj,
list.files(pattern = "newtesting.RMD")
setwd(~/maketest)
setwd(~"/maketest")
setwd("~/maketest")
list.files(pattern = "newtesting.RMD")
rmarkdown::render("~/maketest/newtesting.Rmd")
rmarkdown::render("~/maketest/newtesting.Rmd")
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
out <- lm(y ~ x)
library(xtable)
tab <- xtable(summary(out)$coef, digits=c(0, 2, 2, 1, 2))
print(tab)
print(tab,type="html")
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
out <- lm(y ~ x)
library(xtable)
tab <- xtable(summary(out)$coef, digits=c(0, 2, 2, 1, 2))
print(tab, type="html")
kable(head(resdf),format="latex")
install.packages("kable")
library(kable)
library(knitr)
help(kable)
kable(head(resdf),format="latex")
kable(head(resdf),format="html")
print(tab)
In this context, literate programming [see knuth_literate_1984] is seen as part of a workflow for _reproducible research_ by allowing a report on the results of research to be disseminated along with the computational code that produced the analysis.
source('/usr/lib/R/library/graphics/demo/Hershey.R')
coeffs<-xtable(summary(modenghist)$coef)
library(xtable)
coeffs<-xtable(summary(modenghist)$coef)
modenghist<-lm(resdf$english~resdf$history)
library(xtable)
coeffs<-xtable(summary(modenghist)$coef)
print(coeffs)
help(latex)
??latex
View(resdf)
attach(resdf)
histogram((maths+english+history)/3)
hist((english+history)/3)
histogram((maths+english+history)/3)
hist((english+history)/3)
source('~/maketest/graphs.R')
source('~/maketest/graphs.R')
source('~/maketest/graphs.R')
hist((maths+english+history)/3))
with(resdf, hist((maths+english+history)/3))
source('~/maketest/graphs.R')
conts<-cbind(resdf$maths,resdf$english,$resdf$history)
head(resdf)
cbind(resdf$maths,resdf$english)
conts<-cbind(resdf$maths,resdf$english,$resdf$history)
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in names(conts)){
conts$i[conts$i>100 | conts$i<0]<-NA
}
head(conts)
conts
resdf$maths
resdf$maths[11]
resdf$maths[11]500<
resdf$maths[11]<-500
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in names(conts)){
conts$i[conts$i>100 | conts$i<0]<-NA
}
conts
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in names(conts))
conts$i[conts$i>100 | conts$i<0]
}
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in names(conts)){
conts$i[conts$i>100 | conts$i<0]
}
conts$i
conts
names(conts)
length(conts)
size(conts)
dim(cots)
dim(conts)
help("dim")
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in dim(conts)[2]{
conts$i[conts$i>100 | conts$i<0]
}
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in dim(conts)[2]){
conts$i[conts$i>100 | conts$i<0]
}
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in dim(conts)[2]){
conts[i]>100 | conts[i]i<0]
}
help(if)
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in dim(conts)[2]){
if(conts[i]>100|conts[i]<0){
conts[i]<-NA
}
}
conts
conts<-cbind(resdf$maths,resdf$english,resdf$history)
for (i in dim(conts)[2]){
if(conts[i]>100|conts[i]<0){
print(conts[i])
}
}
conts[1]>100
conts>100
conts<-cbind(resdf$maths,resdf$english,resdf$history)
if(conts>100|conts<0){
conts<-NA
}
if(conts>100|conts<0){conts<-NA}
conts<0
conts>100|conts<0
if(conts>100|conts<0)print("eek!")
conts>100|conts<0<-NA
(conts>100|conts<0)<-NA
conts>100<-NA
conts<100
conts[conts>100]
conts[conts>100|conts<0]<-NA
conts<100
for name in names(resdf){
name>100|name<0<-NA
}
names(resdf)
for column in c(resdf$maths,resdf$english,resdf$history){}
column>100|column<0<-NA
}
for (column in c(resdf$maths,resdf$english,resdf$history)){
column>100|column<0<-NA
}
x<-[1:10]
x<1:10
x<-1:10
for (column in c(resdf$maths,resdf$english,resdf$history)){
column[column>100]|column[column<0]<-NA
}
x[x>5]
x[x<5]
x[x>5]|x[x<5]
for (column in c(resdf$maths,resdf$english,resdf$history)){
column[column>100|column<0]<-NA
}
View(resdf)
x[x>5x<=5]
x[x>5|x<=5]
x[x>5]<-NA
x
x<-1:10
x[x<5|x>5]<-NA
x
conts<-cbind(resdf$maths,resdf$english,resdf$history)
conts[conts>100|conts<0]<-NA
View(resdf)
resdf$maths|resdf$english|resdf|history>100
resdf$maths>100
resdf$maths[resdf$maths>100|resdf$maths<0]<-NA
View(resdf)
resdf$avxm<(resdf$maths+resdf$english+resdf$history)/3
resdf$avxm<-(resdf$maths+resdf$english+resdf$history)/3
resdf$avxm<-round((resdf$maths+resdf$english+resdf$history)/3)
library(dplyr)
library(ggplot2)
install.packages("packrat")
library(packrat)
cwd()
pwd()
setwd("~/maketest")
packrat::init("literater")
packrat::init("~/maketest/literater")
packrat::init("~/maketest")
library(dplyr)
library(ggplot2)
packrat::snapshot()
resdf %.% mutate(stream = cut(avxm, breaks = quantile(avxm)))
resdf %>% mutate(stream = cut(avxm, breaks = quantile(avxm)))
install.packaages("lazyeval")
install.packages("lazyeval")
resdf %>% mutate(stream = cut(avxm, breaks = quantile(avxm)))
resdf %>% mutate(stream = cut(resdf$avxm, breaks = quantile(resdf$avxm)))
resdf$avxm<-round((resdf$maths+resdf$english+resdf$history)/3)
resdf %>% mutate(stream = cut(resdf$avxm, breaks = quantile(resdf$avxm)))
resdf %>% mutate(stream = cut(resdf$avxm, breaks = quantile(resdf$avxm)))
resdf$avxm<-factor(resdf$avxm,levels=c(1,2,3))
head(resdf)
resdf %>% mutate(stream = cut(resdf$avxm, breaks = quantile(resdf$avxm)))
resdf$avxm<-round((resdf$maths+resdf$english+resdf$history)/3)
resdf %>% mutate(stream = cut(resdf$avxm, breaks = quantile(resdf$avxm)))
resdf$avxm<-factor(resdf$avxm)
resdf$avxm<-round((resdf$maths+resdf$english+resdf$history)/3)
resdf %>% mutate(stream = cut(resdf$avxm, breaks = quantile(resdf$avxm)))
resdf$stream<-factor(resdf$stream)
resdf$avxm<-round((resdf$maths+resdf$english+resdf$history)/3)
resdf %>% mutate(stream = cut(resdf$avxm, breaks = seq(quantile(resdf$avxm))))
quantile(resdf$avxm)
seq(quantile(resdf$avxm))
table(quantile(resdf$avxm))
resdf %>% mutate(stream = cut(resdf$avxm, breaks = c(45,60,100))
)
tabel(resdf$stream)
tabl(resdf$stream)
table(resdf$stream)
resdf$stream <- cut(resdf$avxm, breaks = c(45,60,100)))
resdf$stream <- cut(resdf$avxm, breaks = c(45,60,100))
resdf$stream <- cut(resdf$avxm, breaks = c(45,60,100), labels=c("low", "mid", "high"))
table(resdf$stream)
resdf$stream <- cut(resdf$avxm, breaks = c(0,45,60,100), labels=c("low", "mid", "high"))
table(resdf$stream)
resdf$stream<-factor(resdf$stream)
write.table(resdf,"~/maketest/cleandata.csv",sep=",")
resdf$avxm<-round((resdf$maths+resdf$english+resdf$history)/3)
resdf$stream <- cut(resdf$avxm, breaks = c(0,50,60,100), labels=c("low", "mid", "high"))
resdf$stream<-factor(resdf$stream)
write.table(resdf,"~/maketest/cleandata.csv",sep=",")
table(resdf$stream)
resdf$stream <- cut(resdf$avxm, breaks = c(0,55,65,100), labels=c("low", "mid", "high"))
resdf$stream<-factor(resdf$stream)
table(resdf$stream)
resdf$stream <- cut(resdf$avxm, breaks = c(0,50,60,100), labels=c("low", "mid", "high"))
resdf$stream <- factor(cut(resdf$avxm, breaks = c(0,50,60,100), labels=c("low", "mid", "high")))
write.table(resdf,"~/maketest/cleandata.csv",sep=",")
str(resdf)
read.csv("http://www.ucl.ac.uk/~ccaajim/results.csv")
read.csv("http://www.ucl.ac.uk/~ccaajim/results.csv")
png(file = "avg.png", bg = "transparent")
with(resdf, hist((maths+english+history)/3))
dev.off()
install.packages("revealjs",type = source)
install.packages("revealjs")
library(revealjs)
setwd("~/maketest")
x<-1:10
y<-x^2
y[1:2:8]
y[1:8]
y[2:5]
y[2:2:8]
y
x[3:2:9]
y>5
y[y>5]
x[x5]
x[x>5]
x>5
# first read the raw data from an online source
resdf <- read.csv("http://ucl.ac.uk/~ccaajim/results.csv", header = TRUE)
# check values of continuous variables are in range dropping any out of range
resdf$maths[resdf$maths > 100 | resdf$maths < 0] <- NA
resdf$english[resdf$english > 100 | resdf$english < 0] <- NA
resdf$history[resdf$history > 100 | resdf$history < 0] <- NA
# create the aggregate score for the exam variables as the mean
resdf$avxm <- round((resdf$maths + resdf$english + resdf$history) / 3)
# change the type of the categoricals to factor
resdf$sex <- factor(resdf$sex, labels = c("girl", "boy"))
resdf$class <- factor(resdf$class)
# create the ordinal variable stream on the basis of avxm
resdf$stream <-
factor(cut(
resdf$avxm,
breaks = c(0, 50, 60, 100),
labels = c("low", "mid", "high")
), ordered = TRUE)
# write this to a csv file locally.  This isn't necessary but it will give us more control when we create the makefile
write.table(resdf, "~/maketest/cleandata.csv", sep = ",")
install.packages("tufte"j,type="source")
install.packages("tufte"j,type="source")
install.packages("tufte",type="source")
